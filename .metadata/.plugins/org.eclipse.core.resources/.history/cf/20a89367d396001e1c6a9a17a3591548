/*
 * stm32f407_i2c_driver.c
 *
 *  Created on: 23-Jul-2023
 *      Author: wardawg
 */
#include "stm32f407xx.h"
#include "stm32f407_i2c_driver.h"
#include "stm2f407_gpio_driver.h"


void I2C_PeriClockControl(I2C_RegDef_t *pI2Cx, uint8_t EnorDi){
	if(EnorDi == ENABLE){
		if(pI2Cx ==  I2C1)
			I2C1_PCLK_EN();
		if(pI2Cx ==  I2C2)
			I2C2_PCLK_EN();
		if(pI2Cx ==  I2C3)
			I2C3_PCLK_EN();
	}
	else {
		if(pI2Cx ==  I2C1)
			I2C1_PCLK_DI();
		if(pI2Cx ==  I2C2)
			I2C2_PCLK_DI();
		if(pI2Cx ==  I2C3)
			I2C3_PCLK_DI();
	}
}


uint8_t ahb_prescalar[8]={2,4,8,16,64,128,256,512};
uint8_t apb1_prescalar[8]={2,4,8,16};
uint32_t RCC_GetPCLK1_Value(){
	uint32_t pclk_1,SysClk;
	uint8_t clk_src, temp, AHB_Pre,APB1_Pre;
	uint8_t clk_src = (RCC->CFGR >>2)&0x3;
	if(clk_src == 0){
		SysClk = 16000000;
	}
	else if(clk_src == 1){
		SysClk = 8000000;
	}

	//For the AHB Prescalar
	temp = (RCC->CFGR >> 4)& 0x0F;

	if (temp<8){
		AHB_Pre = 1;
	}
	if (temp>=8){
		AHB_Pre = ahb_prescalar[(temp-8)];
	}

	//For the APB Prescalar
	temp = (RCC->CFGR >> 10)& 0x07;

	if (temp<4){
		APB1_Pre = 1;
	}
	if (temp>=4){
		APB1_Pre = apb1_prescalar[(temp-4)];
	}
	pclk_1 = SysClk/(ahb_prescalar * apb1_prescalar);
	return pclk1;
}

void I2C_Ini(I2C_Handle_t *pI2CHandle){
	uint32_tempreg=0;
	//ACK Control Bit Code

	tempreg |= pI2CHandle->I2C_Config.I2C_Ack_Control<<10;
	pI2CHandle->pI2Cx->CR1 = tempreg;

	//Configure the freq field of Cr2
	tempreg=0;
	tempreg |= RCC_GetPCLK1Value()/1000;
	pI2CHandle->pI2Cx->CR2 = (tempreg)&0x3F;

	//program the device's own address;
	tempreg |= pI2CHandle->I2C_Config.I2C_DeviceAddress <<1;
	pI2CHandle->pI2Cx->OAR1 = tempreg;
	tempreg |= 1<<14;
	pI2CHandle->pI2Cx->OAR1 |= tempreg;

	//CCR Calculations
	uint16_t ccr_value=0;
	if(pI2CHandle->I2C_Config.I2C_SCLSpeed <= I2C_SCL_Speed_SM){
		//standard mode
		tempreg = RCC_GetPCLK1Value()/(2*pI2CHandle->I2C_Config.I2C_SCLSpeed);
	}
	else{

	}


}



void I2C_IRQInterruptConfig(uint8_t IRQNumber, uint8_t EnorDi)
{

	if(EnorDi == ENABLE)
	{
		if(IRQNumber <= 31)
		{
			//program ISER0 register
			*NVIC_ISER0 |= ( 1 << IRQNumber );

		}else if(IRQNumber > 31 && IRQNumber < 64 ) //32 to 63
		{
			//program ISER1 register
			*NVIC_ISER1 |= ( 1 << (IRQNumber % 32) );
		}
		else if(IRQNumber >= 64 && IRQNumber < 96 )
		{
			//program ISER2 register //64 to 95
			*NVIC_ISER3 |= ( 1 << (IRQNumber % 64) );
		}
	}else
	{
		if(IRQNumber <= 31)
		{
			//program ICER0 register
			*NVIC_ICER0 |= ( 1 << IRQNumber );
		}else if(IRQNumber > 31 && IRQNumber < 64 )
		{
			//program ICER1 register
			*NVIC_ICER1 |= ( 1 << (IRQNumber % 32) );
		}
		else if(IRQNumber >= 6 && IRQNumber < 96 )
		{
			//program ICER2 register
			*NVIC_ICER3 |= ( 1 << (IRQNumber % 64) );
		}
	}

}
void I2C_IRQPriorityConfig(uint8_t IRQNumber,uint32_t IRQPriority)
{
	//1. first lets find out the ipr register
	uint8_t iprx = IRQNumber / 4;
	uint8_t iprx_section  = IRQNumber %4 ;

	uint8_t shift_amount = ( 8 * iprx_section) + ( 8 - NO_PR_BITS_IMPLEMENTED) ;

	*(  NVIC_PR_BASE_ADDR + iprx ) |=  ( IRQPriority << shift_amount );

}

